-- üî• Importar Fluent UI
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

-- üéÆ Servi√ßos
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer

-- ‚öôÔ∏è Configura√ß√µes Otimizadas
local StepAmountToTP = 1000 
local totalTime = 0.1
local SafeTPGuarantee = 3
local NEARBY_DISTANCE = 15
local CLOSE_BASE_SPEED = 45 -- Velocidade espec√≠fica para fechar base
local SAFETP_SPEED = 45 -- Velocidade do SafeTP

-- üì° Estado
local enabled = false
local closeBaseLoopEnabled = false
local currentTeleportTask = nil
local currentCloseBaseTask = nil
local savedBaseCFrame = nil -- CFrame da base salva
local savedCloseBaseCFrame = nil -- CFrame para fechar base
local rebirthNumber = 1 -- N√∫mero de rebirths (1-9)

-- üåü Criar Janela Fluent
local Window = Fluent:CreateWindow({
    Title = "KKJKKJ Hub",
    SubTitle = "Feito por: ChatGPTüòéüòéüòéü§ìü§ìü§ìü§ìü§ìü§ìü§ìü§ìüòéüòéüòé",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- üìã Criar Abas
local Tabs = {
    Main = Window:AddTab({ Title = "üè† Principal", Icon = "home" }),
    Settings = Window:AddTab({ Title = "‚öôÔ∏è Configura√ß√µes", Icon = "settings" }),
    Info = Window:AddTab({ Title = "‚ÑπÔ∏è Informa√ß√µes", Icon = "info" })
}

-- üîç Fun√ß√£o para obter Character e HRP atualizados
local function getCharacterAndHRP()
    local character = LocalPlayer.Character
    if not character then return nil, nil end
    
    local hrp = character:FindFirstChild("HumanoidRootPart")
    if not hrp then return nil, nil end
    
    return character, hrp
end

-- üéØ Gerar posi√ß√£o aleat√≥ria pr√≥xima √† base baseada na dist√¢ncia configurada
local function getRandomNearbyPosition(basePosition)
    local angle = math.random() * math.pi * 2
    local distance = math.random(5, NEARBY_DISTANCE) -- Dist√¢ncia entre 5 e o valor configurado
    
    local offsetX = math.cos(angle) * distance
    local offsetZ = math.sin(angle) * distance
    
    -- Pequena varia√ß√£o na altura para tornar o movimento mais natural
    local offsetY = math.random(-2, 2)
    
    return basePosition + Vector3.new(offsetX, offsetY, offsetZ)
end

-- üöÄ Teleporte suave gen√©rico usando StepAmountToTP - CORRIGIDO
local function executeSmoothTeleport(startPosition, targetPosition, useSteps, customSpeed)
    local character, hrp = getCharacterAndHRP()
    if not character or not hrp then return false end
    
    local distance = (targetPosition - startPosition).Magnitude
    
    if distance > 1 then
        -- Usar velocidade customizada se fornecida
        local speed = customSpeed or SAFETP_SPEED -- Usar velocidade padr√£o do SafeTP se n√£o especificada
        local adjustedDuration = distance / speed
        adjustedDuration = math.max(0.1, math.min(adjustedDuration, 3.0)) -- Limites ajustados
        
        local steps = useSteps or StepAmountToTP
        local stepDelay = adjustedDuration / steps
        
        -- Movimento suave
        for step = 1, steps do
            character, hrp = getCharacterAndHRP()
            if not character or not hrp then break end
            
            local progress = step / steps
            local stepPos = startPosition:Lerp(targetPosition, progress)
            
            -- Varia√ß√£o vertical para movimento mais natural
            local verticalVariation = math.sin(progress * math.pi) * 0.5
            stepPos = stepPos + Vector3.new(0, verticalVariation, 0)
            
            local originalRotation = hrp.CFrame - hrp.CFrame.Position
            hrp.CFrame = CFrame.new(stepPos) * originalRotation
            
            task.wait(stepDelay)
        end
        
        return true
    else
        -- Se j√° estiver pr√≥ximo, s√≥ ajustar posi√ß√£o final
        hrp.CFrame = CFrame.new(targetPosition) * (hrp.CFrame - hrp.CFrame.Position)
        return true
    end
end

-- üöÄ Teleporte com Velocidade Consistente e Loop Anti-Detec√ß√£o Baseado em Dist√¢ncia
local function teleportSmooth(basePosition, steps, duration)
    local character, hrp = getCharacterAndHRP()
    if not character or not hrp then 
        Fluent:Notify({
            Title = "SafeTP",
            Content = "‚ùå Character ou HumanoidRootPart n√£o encontrado",
            Duration = 3
        })
        return 
    end
    
    local currentPosition = hrp.Position
    
    -- üîÑ Loop infinito com movimento baseado na dist√¢ncia pr√≥xima
    while enabled do
        -- Gerar nova posi√ß√£o aleat√≥ria dentro do raio configurado
        local targetPosition = getRandomNearbyPosition(basePosition)
        
        -- Usar fun√ß√£o gen√©rica de teleporte suave com velocidade do SafeTP
        local success = executeSmoothTeleport(currentPosition, targetPosition, steps, SAFETP_SPEED)
        
        if success then
            -- Atualizar posi√ß√£o atual
            currentPosition = targetPosition
        end
        
        -- ‚è∏Ô∏è Parada estrat√©gica na nova posi√ß√£o
        if enabled then
            task.wait(math.random(0.1, 0.5)) -- Pausa aleat√≥ria entre 0.1 e 0.5 segundos
        end
        
        if not enabled then break end
    end
end

-- üïê Fun√ß√£o para calcular tempo baseado no rebirth
local function getCloseBaseInterval()
    return 50 + (rebirthNumber * 10) -- rebirth 1 = 60s, rebirth 2 = 70s, etc.
end

-- üì¶ Fun√ß√£o para executar um teleporte suave para fechar base (usando StepAmountToTP) - CORRIGIDO
local function executeCloseBaseTeleport()
    local character, hrp = getCharacterAndHRP()
    if character and hrp then
        local currentPos = hrp.Position
        local targetPos = savedCloseBaseCFrame.Position
        
        -- Usar a fun√ß√£o gen√©rica de teleporte suave com velocidade espec√≠fica para fechar base
        local success = executeSmoothTeleport(currentPos, targetPos, StepAmountToTP, CLOSE_BASE_SPEED)
        
        if success then
            -- Ajustar para o CFrame exato final
            hrp.CFrame = savedCloseBaseCFrame
            
            -- Resetar o personagem ap√≥s fechar a base
            task.wait(0.1) -- Pequena pausa antes do reset
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
                LocalPlayer.Character.Humanoid.Health = 0
            end
        end
        
        return success
    end
    return false
end

-- üì¶ Loop para fechar base automaticamente
local function startCloseBaseLoop()
    if not savedCloseBaseCFrame then
        Fluent:Notify({
            Title = "SafeTP",
            Content = "‚ùå Local de 'Fechar Base' n√£o foi salvo!",
            Duration = 3
        })
        closeBaseLoopEnabled = false
        return
    end

    currentCloseBaseTask = task.spawn(function()
        local interval = getCloseBaseInterval()
        
        Fluent:Notify({
            Title = "SafeTP",
            Content = "üîÑ Loop Fechar Base iniciado! Intervalo: " .. interval .. "s (Rebirth: " .. rebirthNumber .. ", Vel: " .. CLOSE_BASE_SPEED .. ")",
            Duration = 3
        })
        
        -- Primeira execu√ß√£o imediata
        if closeBaseLoopEnabled then
            local success = executeCloseBaseTeleport()
            if success and closeBaseLoopEnabled then
                Fluent:Notify({
                    Title = "SafeTP",
                    Content = "üì¶ Base fechada! Resetando... Pr√≥ximo em " .. interval .. "s (Vel: " .. CLOSE_BASE_SPEED .. ")",
                    Duration = 2
                })
            end
        end
        
        -- Loop com timer
        while closeBaseLoopEnabled do
            -- Aguardar o intervalo
            task.wait(interval)
            
            if not closeBaseLoopEnabled then break end
            
            -- Executar teleporte
            local success = executeCloseBaseTeleport()
            if success and closeBaseLoopEnabled then
                Fluent:Notify({
                    Title = "SafeTP",
                    Content = "üì¶ Base fechada automaticamente! Resetando... Pr√≥ximo em " .. interval .. "s (Vel: " .. CLOSE_BASE_SPEED .. ")",
                    Duration = 2
                })
            end
        end
        
        Fluent:Notify({
            Title = "SafeTP",
            Content = "üõë Loop Fechar Base interrompido",
            Duration = 2
        })
        currentCloseBaseTask = nil
    end)
end

-- üì¶ Teleporte instant√¢neo para fechar base
local function teleportToCloseBase()
    if not savedCloseBaseCFrame then
        Fluent:Notify({
            Title = "SafeTP",
            Content = "‚ùå Local de 'Fechar Base' n√£o foi salvo!",
            Duration = 3
        })
        return
    end

    local character, hrp = getCharacterAndHRP()
    if character and hrp then
        hrp.CFrame = savedCloseBaseCFrame
        Fluent:Notify({
            Title = "SafeTP",
            Content = "üì¶ Teleportado para o local de Fechar Base!",
            Duration = 3
        })
    else
        Fluent:Notify({
            Title = "SafeTP",
            Content = "‚ö†Ô∏è Character ou HRP n√£o encontrado!",
            Duration = 3
        })
    end
end

-- ‚öôÔ∏è SafeTP com Loop Cont√≠nuo Baseado em Dist√¢ncia
local function SafeTPToBase()
    if not savedBaseCFrame then
        Fluent:Notify({
            Title = "SafeTP",
            Content = "‚ùå Nenhuma base foi salva! Clique em 'Copiar Base para Roubar' primeiro",
            Duration = 4
        })
        return
    end
    
    local basePosition = savedBaseCFrame.Position

    currentTeleportTask = task.spawn(function()
        Fluent:Notify({
            Title = "SafeTP",
            Content = "üîÑ Iniciando Loop SafeTP (Movimento Aleat√≥rio - Raio: " .. NEARBY_DISTANCE .. ", Vel: " .. SAFETP_SPEED .. ")",
            Duration = 3
        })
        
        -- Loop infinito at√© desativar
        teleportSmooth(basePosition, StepAmountToTP, totalTime)
        
        Fluent:Notify({
            Title = "SafeTP",
            Content = "üõë Loop SafeTP interrompido",
            Duration = 2
        })
        currentTeleportTask = nil
    end)
end

-- üéÆ Interface Principal

-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
-- üìç GERENCIAMENTO DE BASES
-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
Tabs.Main:AddParagraph({
    Title = "üìç Gerenciamento de Bases",
    Content = "Configure as posi√ß√µes da base para roubar e o local para fechar base."
})

-- üè† Bot√£o para salvar posi√ß√£o da base
Tabs.Main:AddButton({
    Title = "üè† Copiar Base para Roubar",
    Description = "Salva sua posi√ß√£o atual como centro do movimento aleat√≥rio",
    Callback = function()
        local character, hrp = getCharacterAndHRP()
        if character and hrp then
            savedBaseCFrame = hrp.CFrame
            Fluent:Notify({
                Title = "SafeTP",
                Content = "‚úÖ Base salva! Centro: " .. math.floor(hrp.Position.X) .. ", " .. math.floor(hrp.Position.Y) .. ", " .. math.floor(hrp.Position.Z) .. " (Raio: " .. NEARBY_DISTANCE .. ")",
                Duration = 4
            })
        else
            Fluent:Notify({
                Title = "SafeTP",
                Content = "‚ùå Erro ao salvar base - Character n√£o encontrado",
                Duration = 3
            })
        end
    end
})

-- üíæ Bot√£o para salvar local de fechar base
Tabs.Main:AddButton({
    Title = "üíæ Salvar Local de Fechar Base",
    Description = "Salva o CFrame atual para teleporte de fechamento da base",
    Callback = function()
        local _, hrp = getCharacterAndHRP()
        if hrp then
            savedCloseBaseCFrame = hrp.CFrame
            Fluent:Notify({
                Title = "SafeTP",
                Content = "‚úÖ Local de 'Fechar Base' salvo com sucesso!",
                Duration = 3
            })
        else
            Fluent:Notify({
                Title = "SafeTP",
                Content = "‚ö†Ô∏è HRP n√£o encontrado!",
                Duration = 3
            })
        end
    end
})

-- üóëÔ∏è Bot√£o para limpar base salva
Tabs.Main:AddButton({
    Title = "üóëÔ∏è Limpar Bases Salvas",
    Description = "Remove todas as bases salvas da mem√≥ria",
    Callback = function()
        savedBaseCFrame = nil
        savedCloseBaseCFrame = nil
        Fluent:Notify({
            Title = "SafeTP",
            Content = "üóëÔ∏è Todas as bases foram limpas da mem√≥ria!",
            Duration = 2
        })
    end
})

-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
-- üöÄ SAFETP - MOVIMENTO ALEAT√ìRIO
-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
Tabs.Main:AddParagraph({
    Title = "üöÄ SafeTP - Movimento Aleat√≥rio",
    Content = "Sistema de movimento aleat√≥rio para roubar bases de forma segura."
})

-- üîÑ Toggle principal
local MainToggle = Tabs.Main:AddToggle("SafeTPToggle", {
    Title = "üîÑ Loop SafeTP",
    Description = "Ativar/Desativar o loop de movimento aleat√≥rio",
    Default = false
})

MainToggle:OnChanged(function(Value)
    enabled = Value
    
    if enabled then
        MainToggle:SetTitle("üì° Loop SafeTP")
        
        if currentTeleportTask then
            task.cancel(currentTeleportTask)
            currentTeleportTask = nil
        end
        
        SafeTPToBase()
        
        Fluent:Notify({
            Title = "SafeTP",
            Content = "üîÑ Loop SafeTP Ativado! (Movimento Aleat√≥rio - Raio: " .. NEARBY_DISTANCE .. ", Vel: " .. SAFETP_SPEED .. ")",
            Duration = 2
        })
    else
        MainToggle:SetTitle("üîÑ Loop SafeTP")
        
        if currentTeleportTask then
            task.cancel(currentTeleportTask)
            currentTeleportTask = nil
        end
        
        Fluent:Notify({
            Title = "SafeTP",
            Content = "üõë Loop SafeTP Desativado!",
            Duration = 2
        })
    end
end)

-- üìè Slider para configurar raio de movimento
local DistanceSlider = Tabs.Main:AddSlider("DistanceSlider", {
    Title = "üìè Raio de Movimento",
    Description = "Dist√¢ncia m√°xima para movimento aleat√≥rio do SafeTP",
    Default = NEARBY_DISTANCE,
    Min = 5,
    Max = 50,
    Rounding = 0,
    Callback = function(Value)
        NEARBY_DISTANCE = Value
        if savedBaseCFrame then
            Fluent:Notify({
                Title = "SafeTP",
                Content = "üìè Raio atualizado para: " .. Value,
                Duration = 2
            })
        end
    end
})

-- üèÉ Slider para velocidade do SafeTP
local SafeTPSpeedSlider = Tabs.Main:AddSlider("SafeTPSpeedSlider", {
    Title = "üèÉ Velocidade SafeTP",
    Description = "Velocidade do movimento aleat√≥rio do SafeTP",
    Default = SAFETP_SPEED,
    Min = 10,
    Max = 100,
    Rounding = 0,
    Callback = function(Value)
        SAFETP_SPEED = Value
        Fluent:Notify({
            Title = "SafeTP",
            Content = "üèÉ Velocidade SafeTP: " .. Value,
            Duration = 2
        })
    end
})

-- üéØ Bot√£o de Execu√ß√£o Manual
Tabs.Main:AddButton({
    Title = "üöÄ Teste SafeTP",
    Description = "Testar um movimento aleat√≥rio (n√£o loop)",
    Callback = function()
        if not enabled and savedBaseCFrame then
            local character, hrp = getCharacterAndHRP()
            if character and hrp then
                local basePosition = savedBaseCFrame.Position
                local start = hrp.Position
                local targetPosition = getRandomNearbyPosition(basePosition)
                
                -- Movimento √∫nico de teste usando fun√ß√£o gen√©rica
                task.spawn(function()
                    local success = executeSmoothTeleport(start, targetPosition, StepAmountToTP, SAFETP_SPEED)
                    
                    if success then
                        Fluent:Notify({
                            Title = "SafeTP",
                            Content = "‚úÖ Teste conclu√≠do! Movido para posi√ß√£o aleat√≥ria no raio de " .. NEARBY_DISTANCE .. " (Steps: " .. StepAmountToTP .. ", Vel: " .. SAFETP_SPEED .. ")",
                            Duration = 3
                        })
                    end
                end)
            end
        elseif enabled then
            Fluent:Notify({
                Title = "SafeTP",
                Content = "‚ö†Ô∏è Desative o loop primeiro!",
                Duration = 2
            })
        else
            Fluent:Notify({
                Title = "SafeTP",
                Content = "‚ùå Nenhuma base salva!",
                Duration = 2
            })
        end
    end
})

-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
-- üì¶ SISTEMA FECHAR BASE
-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
Tabs.Main:AddParagraph({
    Title = "üì¶ Sistema Fechar Base",
    Content = "Sistema autom√°tico para fechar base baseado no n√∫mero de rebirths."
})

-- üì¶ Bot√£o para teleportar para fechar base
Tabs.Main:AddButton({
    Title = "üì¶ Fechar Base (Teleportar)",
    Description = "Teleporta instantaneamente para o local salvo como Fechar Base",
    Callback = function()
        teleportToCloseBase()
    end
})

-- üîÑ Toggle para loop de fechar base
local CloseBaseToggle = Tabs.Main:AddToggle("CloseBaseLoopToggle", {
    Title = "üîÑ Loop Fechar Base",
    Description = "Ativar/Desativar o loop autom√°tico para fechar base",
    Default = false
})

CloseBaseToggle:OnChanged(function(Value)
    closeBaseLoopEnabled = Value
    
    if closeBaseLoopEnabled then
        CloseBaseToggle:SetTitle("üì° Loop Fechar Base")
        
        if currentCloseBaseTask then
            task.cancel(currentCloseBaseTask)
            currentCloseBaseTask = nil
        end
        
        startCloseBaseLoop()
        
        local interval = getCloseBaseInterval()
        Fluent:Notify({
            Title = "SafeTP",
            Content = "üîÑ Loop Fechar Base Ativado! Intervalo: " .. interval .. "s (Vel: " .. CLOSE_BASE_SPEED .. ")",
            Duration = 2
        })
    else
        CloseBaseToggle:SetTitle("üîÑ Loop Fechar Base")
        
        if currentCloseBaseTask then
            task.cancel(currentCloseBaseTask)
            currentCloseBaseTask = nil
        end
        
        Fluent:Notify({
            Title = "SafeTP",
            Content = "üõë Loop Fechar Base Desativado!",
            Duration = 2
        })
    end
end)

-- üî¢ Slider para n√∫mero de rebirths
local RebirthSlider = Tabs.Main:AddSlider("RebirthSlider", {
    Title = "üî¢ N√∫mero de Rebirths",
    Description = "Define o intervalo do Loop Fechar Base (1=60s, 2=70s...)",
    Default = rebirthNumber,
    Min = 1,
    Max = 9,
    Rounding = 0,
    Callback = function(Value)
        rebirthNumber = Value
        local interval = getCloseBaseInterval()
        Fluent:Notify({
            Title = "SafeTP",
            Content = "üî¢ Rebirth: " .. Value .. " | Intervalo: " .. interval .. "s",
            Duration = 2
        })
    end
})

-- üèÉ Slider para velocidade do Loop Fechar Base
local CloseBaseSpeedSlider = Tabs.Main:AddSlider("CloseBaseSpeedSlider", {
    Title = "üèÉ Velocidade Fechar Base",
    Description = "Velocidade do teleporte para fechar base (maior = mais r√°pido)",
    Default = CLOSE_BASE_SPEED,
    Min = 10,
    Max = 100,
    Rounding = 0,
    Callback = function(Value)
        CLOSE_BASE_SPEED = Value
        Fluent:Notify({
            Title = "SafeTP",
            Content = "üèÉ Velocidade Fechar Base: " .. Value,
            Duration = 2
        })
    end
})

-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
-- ‚öôÔ∏è CONFIGURA√á√ïES AVAN√áADAS
-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
Tabs.Settings:AddParagraph({
    Title = "‚öôÔ∏è Configura√ß√µes de Teleporte",
    Content = "Ajuste os par√¢metros t√©cnicos do sistema de teleporte para melhor performance."
})

local StepsInput = Tabs.Settings:AddInput("StepsInput", {
    Title = "‚ö° Steps do Teleporte",
    Description = "Quantidade de steps para o teleporte (afeta SafeTP e Fechar Base)",
    Default = tostring(StepAmountToTP),
    Placeholder = "Digite a quantidade de steps (100-10000)",
    Numeric = true,
    Finished = true,
    Callback = function(Value)
        local numValue = tonumber(Value)
        if numValue and numValue >= 100 and numValue <= 10000 then
            StepAmountToTP = numValue
            Fluent:Notify({
                Title = "SafeTP",
                Content = "‚úÖ Steps atualizado para: " .. numValue .. " (afeta ambos os sistemas)",
                Duration = 2
            })
        else
            Fluent:Notify({
                Title = "SafeTP",
                Content = "‚ùå Valor inv√°lido! Use entre 100 e 10000",
                Duration = 3
            })
        end
    end
})

local TimeSlider = Tabs.Settings:AddSlider("TimeSlider", {
    Title = "‚è±Ô∏è Tempo Base",
    Description = "Tempo base do teleporte (substitu√≠do pelo c√°lculo de velocidade)",
    Default = totalTime,
    Min = 0.1,
    Max = 3.0,
    Rounding = 1,
    Callback = function(Value)
        totalTime = Value
        Fluent:Notify({
            Title = "SafeTP",
            Content = "‚è±Ô∏è Tempo base atualizado para: " .. Value .. "s (velocidade tem prioridade)",
            Duration = 2
        })
    end
})

-- ‚ÑπÔ∏è Informa√ß√µes
Tabs.Info:AddParagraph({
    Title = "üîÑ SafeTP Hub - Movimento Aleat√≥rio",
    Content = "Script de teleporte com movimento aleat√≥rio baseado em dist√¢ncia.\n\n" ..
              "‚Ä¢ Movimento aleat√≥rio dentro do raio configurado\n" ..
              "‚Ä¢ Pausa aleat√≥ria entre 0.1s e 0.5s\n" ..
              "‚Ä¢ Velocidades independentes para SafeTP e Fechar Base\n" ..
              "‚Ä¢ Estrat√©gia anti-detec√ß√£o avan√ßada\n" ..
              "‚Ä¢ Sistema de base como centro do movimento\n" ..
              "‚Ä¢ Loop autom√°tico para fechar base baseado em rebirths\n" ..
              "‚Ä¢ Ambos os sistemas usam o mesmo valor de Steps\n" ..
              "‚Ä¢ Loop Fechar Base reseta o personagem automaticamente"
})

Tabs.Info:AddParagraph({
    Title = "üìñ Como Usar",
    Content = "1. V√° at√© a base que deseja roubar\n" ..
              "2. Clique em 'Copiar Base para Roubar' para definir o centro\n" ..
              "3. Salve o local de 'Fechar Base' na posi√ß√£o desejada\n" ..
              "4. Ajuste o 'Raio de Movimento' e 'N√∫mero de Rebirths'\n" ..
              "5. Configure as velocidades independentes para SafeTP e Fechar Base\n" ..
              "6. Configure os 'Steps do Teleporte'\n" ..
              "7. Ative o 'Loop SafeTP' para movimento aleat√≥rio\n" ..
              "8. Ative o 'Loop Fechar Base' para fechamento autom√°tico\n" ..
              "9. Use o bot√£o de teste para verificar movimentos\n" ..
              "10. O sistema resetar√° automaticamente ap√≥s fechar a base"
})

Tabs.Info:AddParagraph({
    Title = "‚öôÔ∏è Sistema de Rebirths",
    Content = "‚Ä¢ Rebirth 1: Fecha base a cada 60 segundos\n" ..
              "‚Ä¢ Rebirth 2: Fecha base a cada 70 segundos\n" ..
              "‚Ä¢ Rebirth 3: Fecha base a cada 80 segundos\n" ..
              "‚Ä¢ Rebirth 4: Fecha base a cada 90 segundos\n" ..
              "‚Ä¢ E assim por diante at√© Rebirth 9 (140s)\n" ..
              "‚Ä¢ Usa o mesmo sistema de movimento suave do SafeTP\n" ..
              "‚Ä¢ Velocidade de teleporte configur√°vel independentemente\n" ..
              "‚Ä¢ Reseta o personagem automaticamente ap√≥s cada fechamento"
})

Tabs.Info:AddParagraph({
    Title = "‚öôÔ∏è Funcionamento T√©cnico - ATUALIZADO",
    Content = "‚Ä¢ Velocidades independentes: SafeTP e Fechar Base t√™m sliders separados\n" ..
              "‚Ä¢ C√°lculo de dura√ß√£o baseado em: dist√¢ncia √∑ velocidade\n" ..
              "‚Ä¢ Fun√ß√£o gen√©rica executeSmoothTeleport() com par√¢metro de velocidade\n" ..
              "‚Ä¢ SafeTP usa SAFETP_SPEED, Fechar Base usa CLOSE_BASE_SPEED\n" ..
              "‚Ä¢ Steps do Teleporte afeta a suavidade de ambos os sistemas\n" ..
              "‚Ä¢ Movimento natural com varia√ß√µes verticais\n" ..
              "‚Ä¢ Base salva serve como centro do movimento circular\n" ..
              "‚Ä¢ Sistema de reset autom√°tico ap√≥s fechar base\n" ..
              "‚Ä¢ Notifica√ß√µes mostram as velocidades atuais"
})

-- üîÑ Reconectar quando character respawnar
LocalPlayer.CharacterAdded:Connect(function(character)
    character:WaitForChild("HumanoidRootPart")
    Fluent:Notify({
        Title = "SafeTP",
        Content = "üîÑ Character respawnado, SafeTP pronto!",
        Duration = 2
    })
end)

-- üíæ Gerenciamento de Configura√ß√µes
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})

InterfaceManager:SetFolder("SafeTPConfig")
SaveManager:SetFolder("SafeTPConfig/saves")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)

SaveManager:LoadAutoloadConfig()
